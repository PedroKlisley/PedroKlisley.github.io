== Atividades da Unidade 2

=== Filtro Homomórfico

* Utilizando o programa exemplos/dft.cpp como referência, implemente o filtro homomórfico para melhorar imagens com iluminação irregular. Crie uma cena mal iluminada e ajuste os parâmetros do filtro homomórfico para corrigir a iluminação da melhor forma possível. Assuma que a imagem fornecida é em tons de cinza.

==== Referencial Teórico

O filtro homomórfico utilizado é uma versão modificada do filtro gaussiano e é regido pela seguinte fórmula:


image::FiltroFormula.png[width=500]


Logo, o filtro se comportará como o gráfico mostrado abaixo:

image::GraficoFH.png[width=500]

 Fonte: Slides do Prof. Agostinho Brito

Logo, o programa utilizado deve variar os parâmetros c, &#947;~L~, &#947;~H~ e D~0~ para que seja encontrado um filtro que reduze os efeitos causados pela má iluminação na imagem original.

O uso do filtro homomórfico consiste nas propriedades de iluminância e reflectância da imagem, em que:

image::Formula1.png[width=300]

onde

Iluminação i(x,y): apresenta variações espaciais lentas (frequências baixas); +
Reflectância r(x,y): apresenta variações espaciais rápidas (frequências altas);

Logo, aplicando a operação de logaritmo e transformada de Fourier, tem-se:

image::Formula2.png[width=450]

image::Formula3.png[width=450]



Então, para se utilizar o filtro homomórfico é necessário aplicar o logaritmo na entrada e a função exponencial, de modo que o processo de filtragem deve seguir o esquema abaixo:

image::HFDiagram.png[width=500]
 Fonte:http://blogs.mathworks.com/steve/2013/06/25/homomorphic-filtering-part-1/

.Fonte de Fórmulas
NOTE: Slides do Prof. Agostinho Brito


==== Código-Solução

O código desenvolvido para projetar o filtro homomórfico e aplicar na imagem de entrada, utilizando o programa exemplos/dft.cpp como referência, é mostrado abaixo:


[source,C]
----
#include <iostream>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc/imgproc.hpp>

using namespace cv;
using namespace std;

// troca os quadrantes da imagem da DFT
void deslocaDFT(Mat& image ){
  Mat tmp, A, B, C, D;

  // se a imagem tiver tamanho impar, recorta a regiao para
  // evitar cópias de tamanho desigual
  image = image(Rect(0, 0, image.cols & -2, image.rows & -2));
  int cx = image.cols/2;
  int cy = image.rows/2;
  
  // reorganiza os quadrantes da transformada
  // A B   ->  D C
  // C D       B A
  A = image(Rect(0, 0, cx, cy));
  B = image(Rect(cx, 0, cx, cy));
  C = image(Rect(0, cy, cx, cy));
  D = image(Rect(cx, cy, cx, cy));

  // A <-> D
  A.copyTo(tmp);  D.copyTo(A);  tmp.copyTo(D);

  // C <-> B
  C.copyTo(tmp);  B.copyTo(C);  tmp.copyTo(B);
}


int gamaH_slider = 0;
int gamaH_slider_max = 100.0;

int gamaL_slider = 0;
int gamaL_slider_max = 100.0;

int D0_slider = 50;
int D0_slider_max = 100.0;

int c_slider = 1;
int c_slider_max = 100.0;

char TrackbarName[50];

  // valores ideais dos tamanhos da imagem
  // para calculo da DFT
  int dft_M, dft_N;
  Mat filter, tmp;


void on_trackbar_height(int, void*){
  float D0 = ((float) 2*D0_slider/ (float) D0_slider_max) * sqrt( dft_M*dft_M + dft_N*dft_N )/2;
  float gamaL = ((float) 10*gamaL_slider)/ gamaL_slider_max;
  float gamaH = ((float) 10*gamaH_slider)/gamaH_slider_max;
  float c = ((float) 10*c_slider)/c_slider_max;  

  double gaussianNumerator = 0.0;
  for(int i=0; i<dft_M; i++){
    for(int j=0; j<dft_N; j++){
	gaussianNumerator = c*((i - dft_M/2)*(i - dft_M/2) + (j - dft_N/2)*(j - dft_N/2));
	tmp.at<float> (i,j) = (gamaH - gamaL) * (1 - exp(-gaussianNumerator/(D0*D0))) + gamaL;	
    }
  }

  Mat comps[]= {tmp, tmp};
  merge(comps, 2, filter);
}



int main(int , char**){
  VideoCapture cap;   
  Mat complexImage, multsp;
  Mat padded;
  Mat image, imagegray; 
  Mat_<float> realInput, zeros;
  vector<Mat> planos;

  // guarda tecla capturada
  char key;

  // abre a câmera default
  cap.open(0);
  if(!cap.isOpened())
    return -1;

  // captura uma imagem para recuperar as
  // informacoes de gravação
  cap >> image;

  // identifica os tamanhos otimos para
  // calculo do FFT
  dft_M = getOptimalDFTSize(image.rows);// 480
  dft_N = getOptimalDFTSize(image.cols);// 640

  // realiza o padding da imagem
  copyMakeBorder(image, padded, 0,
                 dft_M - image.rows, 0,
                 dft_N - image.cols,
                 BORDER_CONSTANT, Scalar::all(0));

  // parte imaginaria da matriz complexa (preenchida com zeros)
  zeros = Mat_<float>::zeros(padded.size());

  // prepara a matriz complexa para ser preenchida
  complexImage = Mat(padded.size(), CV_32FC2, Scalar(0));

  // a função de transferência (filtro frequencial) deve ter o
  // mesmo tamanho e tipo da matriz complexa
  filter = complexImage.clone();

  // cria uma matriz temporária para criar as componentes real
  // e imaginaria do filtro ideal
  tmp = Mat(dft_M, dft_N, CV_32F);

  namedWindow("filtrada", 1);

  sprintf( TrackbarName, "GamaH x %d", gamaH_slider_max );
  createTrackbar( TrackbarName, "filtrada",
				  &gamaH_slider,
				  gamaH_slider_max,
				  on_trackbar_height );
  //on_trackbar_blend(alfa_slider, 0);
  
  sprintf( TrackbarName, "GamaL x %d", gamaL_slider_max );
  createTrackbar( TrackbarName, "filtrada",
				  &gamaL_slider,
				  gamaL_slider_max,
				  on_trackbar_height );
  sprintf( TrackbarName, "D0 x %d", D0_slider_max );
  createTrackbar( TrackbarName, "filtrada",
				  &D0_slider,
				  D0_slider_max,
				  on_trackbar_height );
  sprintf( TrackbarName, "c x %d", c_slider_max );
  createTrackbar( TrackbarName, "filtrada",
				  &c_slider,
				  c_slider_max,
				  on_trackbar_height );
  on_trackbar_height(D0_slider, 0);


  for(;;){
    cap >> image;
    cvtColor(image, imagegray, CV_BGR2GRAY);
    imshow("original", imagegray);
    //flip(imagegray, imagegray, 1);

    // realiza o padding da imagem
    copyMakeBorder(imagegray, padded, 0,
                   dft_M - image.rows, 0,
                   dft_N - image.cols,
                   BORDER_CONSTANT, Scalar::all(0));

    // limpa o array de matrizes que vao compor a
    // imagem complexa
    planos.clear();
    // cria a compoente real
    realInput = Mat_<float>(padded);
    
    //Aplica ln na imagem
    for(int i=0; i<dft_M; i++){
    	for(int j=0; j<dft_N; j++){  
    		realInput.at<float> (i,j) = log(1 + realInput.at<float> (i,j) );
	}
    }
     
    // insere as duas componentes no array de matrizes
    planos.push_back(realInput);
    planos.push_back(zeros);

    // combina o array de matrizes em uma unica componente complexa
    merge(planos, complexImage);

    // calcula o dft
    dft(complexImage, complexImage);

    // realiza a troca de quadrantes
    deslocaDFT(complexImage);

    // aplica o filtro frequencial
    mulSpectrums(complexImage,filter,complexImage,0);

    // troca novamente os quadrantes
    deslocaDFT(complexImage);

    // calcula a DFT inversa
    idft(complexImage, complexImage);

    // limpa o array de planos
    planos.clear();

    // separa as partes real e imaginaria da imagem filtrada
    split(complexImage, planos);


    // normaliza a parte real para exibicao
    normalize(planos[0], planos[0], 0, 1, CV_MINMAX);

    //Aplica exp à imagem
    for(int i=0; i<dft_M; i++){
    	for(int j=0; j<dft_N; j++){  
		planos[0].at<float> (i,j) = exp( planos[0].at<float> (i,j) );
	}
    }    


    normalize(planos[0], planos[0], 0, 1, CV_MINMAX);

    imshow("filtrada", planos[0]);
 
    
    key = (char) waitKey(10);
    if( key == 27 ) break; // esc pressed!
  }
  return 0;
}
----

==== Resultados


A primeira imagem original é mostrada abaixo em seguida é mostrado a imagem filtrada, em que a imagem filtrada foi espelhada

image::ImagemPM1SF.png[width=400]

image::ImagemPM1CF.png[width=400]	

Uma nova cena foi montada, obtendo as seguintes imagens original e filtrada, em que a imagem filtrada foi espelhada

image::ImagemPM2SF.png[width=400]   
image::ImagemPM2CF.png[width=400]	

Agora, tentou-se gerar uma cena com pior iluminação e os resultados são mostrados abaixo

image::ImagemPM3SF.png[width=400]   
image::ImagemPM3CF.png[width=400]

Os resultados mostram que o filtro homomórfico conseguiu melhorar o efeito da má iluminação nas imagens. Entretanto, observou-se que a escolha dos parâmetros é bastante difícil para obter um filtro que produz respostas desejáveis e que uma pequena diferença na imagem de entrada pode necessitar de diferentes parâmetros para melhorar o filtro.

==== Descrição do Código

Primeiramente, incluiu-se as bibliotecas e espaços de variáveis

[source,C]
----
#include <iostream>
#include <opencv2/opencv.hpp>
#include <opencv2/imgproc/imgproc.hpp>

using namespace cv;
using namespace std;
----

Função para deslocar os quadrantes da imagem na DFT, deslocando a origem para o centro da imagem

[source,C]
----
// troca os quadrantes da imagem da DFT
void deslocaDFT(Mat& image ){
  Mat tmp, A, B, C, D;

  // se a imagem tiver tamanho impar, recorta a regiao para
  // evitar cópias de tamanho desigual
  image = image(Rect(0, 0, image.cols & -2, image.rows & -2));
  int cx = image.cols/2;
  int cy = image.rows/2;
  
  // reorganiza os quadrantes da transformada
  // A B   ->  D C
  // C D       B A
  A = image(Rect(0, 0, cx, cy));
  B = image(Rect(cx, 0, cx, cy));
  C = image(Rect(0, cy, cx, cy));
  D = image(Rect(cx, cy, cx, cy));

  // A <-> D
  A.copyTo(tmp);  D.copyTo(A);  tmp.copyTo(D);

  // C <-> B
  C.copyTo(tmp);  B.copyTo(C);  tmp.copyTo(B);
}
----

Declaração de variáveis de parâmetros do filtro e matrizes do filtro

[source,C]
----
int gamaH_slider = 0;
int gamaH_slider_max = 100.0;

int gamaL_slider = 0;
int gamaL_slider_max = 100.0;

int D0_slider = 50;
int D0_slider_max = 100.0;

int c_slider = 1;
int c_slider_max = 100.0;

char TrackbarName[50];

  // valores ideais dos tamanhos da imagem
  // para calculo da DFT
  int dft_M, dft_N;
  Mat filter, tmp;
----


Função que altera valor do filtro que multiplicará a imagem de entrada

[source,C]
----
void on_trackbar_height(int, void*){
  float D0 = ((float) 2*D0_slider/ (float) D0_slider_max) * sqrt( dft_M*dft_M + dft_N*dft_N )/2;
  float gamaL = ((float) 10*gamaL_slider)/ gamaL_slider_max;
  float gamaH = ((float) 10*gamaH_slider)/gamaH_slider_max;
  float c = ((float) 10*c_slider)/c_slider_max;  

  double gaussianNumerator = 0.0;
  for(int i=0; i<dft_M; i++){
    for(int j=0; j<dft_N; j++){
	gaussianNumerator = c*((i - dft_M/2)*(i - dft_M/2) + (j - dft_N/2)*(j - dft_N/2));
	tmp.at<float> (i,j) = (gamaH - gamaL) * (1 - exp(-gaussianNumerator/(D0*D0))) + gamaL;	
    }
  }

  Mat comps[]= {tmp, tmp};
  merge(comps, 2, filter);
}
----


Declaração de variáveis utilizadas na função main

[source,C]
----
  VideoCapture cap;   
  Mat complexImage, multsp;
  Mat padded;
  Mat image, imagegray; 
  Mat_<float> realInput, zeros;
  vector<Mat> planos;

  // guarda tecla capturada
  char key;
----

Abre câmera e captura imagem

[source,C]
----
  // abre a câmera default
  cap.open(0);
  if(!cap.isOpened())
    return -1;

  // captura uma imagem para recuperar as
  // informacoes de gravação
  cap >> image;
----


Calcula valores ótimos para DFT e realiza padding da imagem

[source,C]
----
  // identifica os tamanhos otimos para
  // calculo do FFT
  dft_M = getOptimalDFTSize(image.rows);// 480
  dft_N = getOptimalDFTSize(image.cols);// 640

  // realiza o padding da imagem
  copyMakeBorder(image, padded, 0,
                 dft_M - image.rows, 0,
                 dft_N - image.cols,
                 BORDER_CONSTANT, Scalar::all(0));
----

Inicializa matrizes de imagem de entrada e filtro

[source,C]
----
  // parte imaginaria da matriz complexa (preenchida com zeros)
  zeros = Mat_<float>::zeros(padded.size());


  // prepara a matriz complexa para ser preenchida
  complexImage = Mat(padded.size(), CV_32FC2, Scalar(0));

  // a função de transferência (filtro frequencial) deve ter o
  // mesmo tamanho e tipo da matriz complexa
  filter = complexImage.clone();

  // cria uma matriz temporária para criar as componentes real
  // e imaginaria do filtro ideal
  tmp = Mat(dft_M, dft_N, CV_32F);
----

[source,C]
----
  for(;;){
    cap >> image;
    cvtColor(image, imagegray, CV_BGR2GRAY);
    imshow("original", imagegray);
    //flip(imagegray, imagegray, 1);

    // realiza o padding da imagem
    copyMakeBorder(imagegray, padded, 0,
                   dft_M - image.rows, 0,
                   dft_N - image.cols,
                   BORDER_CONSTANT, Scalar::all(0));

    // limpa o array de matrizes que vao compor a
    // imagem complexa
    planos.clear();
    // cria a compoente real
    realInput = Mat_<float>(padded);
----

Aplica operação de logaritmo sobre a entrada e une parte real e imaginária

[source,C]
----
    
    //Aplica ln na imagem
    for(int i=0; i<dft_M; i++){
    	for(int j=0; j<dft_N; j++){  
    		realInput.at<float> (i,j) = log(1 + realInput.at<float> (i,j) );
	}
    }
     
    // insere as duas componentes no array de matrizes
    planos.push_back(realInput);
    planos.push_back(zeros);

    // combina o array de matrizes em uma unica componente complexa
    merge(planos, complexImage);
----

Realiza dft sobre a entrada, desloca e multiplica pelo matriz do filtro ponto-a-ponto

[source,C]
----
    // calcula o dft
    dft(complexImage, complexImage);

    // realiza a troca de quadrantes
    deslocaDFT(complexImage);

    // aplica o filtro frequencial
    mulSpectrums(complexImage,filter,complexImage,0);
----


Desloca a matriz resultante, calcula a transformada inversa e separa a matriz complexa em parte real e imaginária

[source,C]
----
    // troca novamente os quadrantes
    deslocaDFT(complexImage);

    // calcula a DFT inversa
    idft(complexImage, complexImage);

    // limpa o array de planos
    planos.clear();

    // separa as partes real e imaginaria da imagem filtrada
    split(complexImage, planos);
----

Normaliza a parte real, calcula a exponencial da parte real e normaliza novamente

[source,C]
----
    // normaliza a parte real para exibicao
    normalize(planos[0], planos[0], 0, 1, CV_MINMAX);

    //Aplica exp à imagem
    for(int i=0; i<dft_M; i++){
    	for(int j=0; j<dft_N; j++){  
		planos[0].at<float> (i,j) = exp( planos[0].at<float> (i,j) );
	}
    }    

    normalize(planos[0], planos[0], 0, 1, CV_MINMAX);
----


A normalização antes da exponencial não é realizada na aplicação do filtro homomórfico original. Entretanto, sem essa normalização obteve-se apenas imagem totalmente preta como resultado da filtragem. Logo, foi utilizado esse artifício para viabilizar a utilização do filtro homomórfico


=== Pontilhismo

O Exercício 11. 1 consiste em desenvolver o programa cannypoints.cpp A ideia é usar as bordas produzidas pelo algoritmo de Canny  para melhorar a qualidade da imagem pontilhista gerada
Dessa forma, para os testes gerados com o programa cannypoints.cpp, foram obtidos os seguintes resultados:

image::Brasil.png[width=500]

Utilizando as configurações de STEP=10, threshold =3, JITTER =2 e RAIO =1, foi obtida a figura a seguir:


image::Brasil2.png[width=500]

 FIGURA2 – Imagem gerada a partir da Figura 1 após tratamento com o cannypoints.cpp

A fim de fazer outros testes tem-se a seguinte figura  a ser editada:

image::Ufrn.png[width=500]

 Figura 3 – Imagem original

Na imagem resultante observa-se na grandeza STEP, que define o passo usado para varrer a imagem de referência foi usada no valor 155, o raio foi mantido constante (1) e a imagem gerada apresenta bastante nitidez em relação à imagem original.

image::Ufrn2.png[width=500]

 FIGURA 4 – Imagem gerada a partir da Figura 3 após tratamento com o cannypoints.cpp

Para a obtenção desses resultados, foram desenhados pontos na imagem pontilhista básica obtida da imagem original.

Foi usada a posição dos pixels de borda encontrados pelo algoritmo de Canny para desenhar pontos (círculos de raio variável) nos respectivos locais na imagem gerada.

Os testes realizados consistiram em ir aumentando (ou diminuindo) os limiares do algoritmo de Canny e, para cada novo par de limiares, desenhado círculos cada vez menores (ou menores) nas posições encontradas.

As ferramentes utilizadas no OpenCV são as bibliotecas e funções especificadas no código  (cannypoints.cpp) comentado a seguir.
Vale destratar que o cannypoints.cpp é fundamentado no “algoritmo de Canny”  (canny.cpp) e no  programa “arte com pontilhismo”  (pontilhismo.cpp), presentes no tutorial da disciplina Processamento Digital de Imagens.

==== Código

[source,C]
----
Codigo
----
